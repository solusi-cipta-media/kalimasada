// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  fullName          String
  email             String              @unique
  roleId            Int
  password          String
  avatar            String?             @db.Text
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  role              Role                @relation(fields: [roleId], references: [id])
  generatedPayrolls PayrollGeneration[]
}

model Role {
  id                Int              @id @default(autoincrement())
  name              String
  description       String?
  byPassAllFeatures Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  User              User[]
  RolePermission    RolePermission[]
}

model Permission {
  id             Int              @id @default(autoincrement())
  label          String
  href           String?
  description    String?
  icon           String?
  isSection      Boolean          @default(false)
  sequence       Float            @default(0)
  parentId       Int?
  showOnSidebar  Boolean          @default(false)
  parent         Permission?      @relation("children", fields: [parentId], references: [id])
  children       Permission[]     @relation("children")
  RolePermission RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
}

// Spa & Salon Business Models

model Employee {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  phone        String?
  position     String // therapist, receptionist, manager, etc
  salary       Decimal       @db.Decimal(10, 2)
  avatar       String?       @db.Text
  isActive     Boolean       @default(true)
  hireDate     DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  payrolls     Payroll[]
}

model Customer {
  id           Int           @id @default(autoincrement())
  name         String
  email        String?       @unique
  phone        String
  address      String?       @db.Text
  birthDate    DateTime?
  gender       Gender?
  notes        String?       @db.Text
  avatar       String?       @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

model Service {
  id                  Int                  @id @default(autoincrement())
  name                String
  description         String?              @db.Text
  price               Decimal              @db.Decimal(10, 2)
  duration            Int // in minutes
  category            ServiceCategory
  employeeCommission  Decimal?             @db.Decimal(10, 2) // commission amount in rupiah for employees
  image               String?              @db.Text // image URL or path
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  appointmentServices AppointmentService[]
}

model Appointment {
  id               Int                  @id @default(autoincrement())
  customerId       Int
  employeeId       Int
  date             DateTime
  startTime        DateTime
  endTime          DateTime
  status           AppointmentStatus    @default(SCHEDULED)
  totalPrice       Decimal              @db.Decimal(10, 2)
  commissionAmount Decimal              @default(0) @db.Decimal(10, 2)
  tipeLayanan      String?              @default("DI_TEMPAT")
  upahLembur       Decimal?             @default(0) @db.Decimal(10, 2)
  uangBensin       Decimal?             @default(0) @db.Decimal(10, 2)
  notes            String?              @db.Text
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  customer         Customer             @relation(fields: [customerId], references: [id])
  employee         Employee             @relation(fields: [employeeId], references: [id])
  services         AppointmentService[]
}

model AppointmentService {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  serviceId     Int
  price         Decimal     @db.Decimal(10, 2)
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id])
}

model Payroll {
  id           Int                @id @default(autoincrement())
  employeeId   Int
  month        Int // 1-12
  year         Int
  baseSalary   Decimal            @db.Decimal(10, 2)
  commission   Decimal            @default(0) @db.Decimal(10, 2)
  bonus        Decimal            @default(0) @db.Decimal(10, 2)
  deduction    Decimal            @default(0) @db.Decimal(10, 2)
  totalSalary  Decimal            @db.Decimal(10, 2)
  paidAt       DateTime?
  status       PayrollStatus      @default(PENDING)
  notes        String?            @db.Text
  generationId Int?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  employee     Employee           @relation(fields: [employeeId], references: [id])
  generation   PayrollGeneration? @relation(fields: [generationId], references: [id])

  @@unique([employeeId, month, year])
}

model PayrollGeneration {
  id              Int       @id @default(autoincrement())
  month           Int // 1-12
  year            Int
  generatedBy     Int
  employeeCount   Int
  totalAmount     Decimal   @default(0) @db.Decimal(12, 2)
  status          String    @default("COMPLETED")
  notes           String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  generatedByUser User      @relation(fields: [generatedBy], references: [id])
  payrolls        Payroll[]

  @@unique([month, year])
}

// Enums
enum Gender {
  MALE
  FEMALE
}

enum ServiceCategory {
  FACIAL
  MASSAGE
  BODY_TREATMENT
  HAIR_TREATMENT
  NAIL_CARE
  MAKEUP
  WAXING
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PayrollStatus {
  PENDING
  PAID
  CANCELLED
}
